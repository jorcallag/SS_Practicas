//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Based on example 2 page 18 of OReilly Learning OpenCV.pdf:
// Basada en práctica 1 de SPD.
#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <locale.h>
#include "opencv/cv.h"
#include "opencv/highgui.h"

int main(int argc, char* argv[]) {

	setlocale(LC_ALL, "Spanish");  // hace que printf "entienda" tildes, ñ, etc. 

	printf("\nPulse tecla ESC para cerrar la ventana\n");
	// el archivo .mp4 está en _pub/_comm/eje del repositorio público
	play((char*)"P01Eje1.mp4", (char*)"Ventana 1");

	printf("\nPulse tecla RETORNO para terminar\n");
	getchar();
	return 0;
}

void play(char* file_name, char* nombre_ventana)
{
	char key = 0;

	// tipos de estructuras definidas en OpenCV
	CvCapture* g_capture = NULL;	// Para gestionar la captura de video
	IplImage* newframe, * oldframe; // para gestionar cada frame
	IplImage img;

	// Crea una ventana OpenCV para mostrar el video
	cvNamedWindow(nombre_ventana, CV_WINDOW_AUTOSIZE);
	g_capture = cvCreateFileCapture(file_name);	// Abre el archivo de video
	if (NULL == g_capture) {
		printf("\n\nERROR: No se pudo abrir el archivo de video\n\n");
		return;
	}
	// Bucle de proceso de frames
	newframe = cvQueryFrame(g_capture); // Lee frame del archivo
	while (newframe && (key != 27)) {
		oldframe = newframe;
		cvShowImage(nombre_ventana, oldframe); // Enseña la imagen antigua
		newframe = cvQueryFrame(g_capture);	  // Carga la actual

		key = cvWaitKey(1); // Espera que se pulse una tecla con un timeout de 1 ms
								// Aquí podemos decodificar la tecla
	}  // end of:   while(newframe && (key != 27 ) ) {
	// Cerrar archivo de video
	cvReleaseCapture(&g_capture);
	cvDestroyWindow(nombre_ventana);
}